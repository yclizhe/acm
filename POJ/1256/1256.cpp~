#include <iostream>
#include <cstring>
#include <algorithm>
using namespace std;
char solution[15];
char a[15];
int len;
bool cmp(char x, char y) {
	if(x-y==32 || y-x==32)
		return x<y;
	else {
		if(x>=97)
			x = x-32;
		if(y>=97)
			y = y-32;
		return x<y;
	}
}
bool cmp1(char x, char y) {
	if(tolower(x) == tolower(y))
		return x<y;
	else
		return tolower(x)<tolower(y);
}

inline bool swap1(int x, int y) {
	if(x==y)
		return true;
	else if(a[y-1] == a[y])
		return false;
	else {
		a[x] = a[x]^a[y];
		a[y] = a[x]^a[y];
		a[x] = a[x]^a[y];
		return true;
	}
}
void dfs(int depth) {
	if(depth ==  len) {
		cout << a << endl;
		return;
	}

	bool flag[150];
	memset(flag,0,sizeof(flag));
	for(int i=depth; i<len; i++) {
	//	if(i==depth)
	//		dfs(depth+1);
	if(depth==1)
	int x = 1;
		if(swap1(depth,i)) {
			dfs(depth+1);
			if(i!=depth) {
                a[i] = a[i]^a[depth];
                a[depth] = a[i]^a[depth];
                a[i] = a[i]^a[depth];
			}
		}

	}

}
int main() {
	int N;
	cin >> N;
	while(N--) {
		cin >> a;
		len = strlen(a);
		sort(a,a+len,cmp1);
		dfs(0);
	}
}

